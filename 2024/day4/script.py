def parse_file(file_path):
    """–ó—á–∏—Ç—É—î —Ä—è–¥–∫–∏ –∑ —Ñ–∞–π–ª—É."""
    with open(file_path, 'r') as f:
        return [line.strip() for line in f if line.strip()]

def find_word_count(grid, word):
    """
    –®—É–∫–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—è–≤ —Å–ª–æ–≤–∞ —É –º–∞—Ç—Ä–∏—Ü—ñ –≤ —Ä—ñ–∑–Ω–∏—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö.
    grid: –º–∞—Ç—Ä–∏—Ü—è —Å–∏–º–≤–æ–ª—ñ–≤ (—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫—ñ–≤)
    word: —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É

    –¶–µ –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—à—É–∫—É –ø—ñ–¥—Ä—è–¥–∫–∞ —É 2D-–º–∞—Ç—Ä–∏—Ü—ñ. (–°—Ö–æ–∂–∏–π –∞–ª–µ —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π: –ö–Ω—É—Ç–∞-–ú–æ—Ä—Ä—ñ—Å–∞-–ü—Ä–∞—Ç—Ç–∞)
    –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: ùëÇ(ùëÅ*ùëÄ*ùêæ), –¥–µ N ‚Äî –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤, M ‚Äî –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –º–∞—Ç—Ä–∏—Ü—ñ, K ‚Äî –¥–æ–≤–∂–∏–Ω–∞ —Å–ª–æ–≤–∞.
    """
    rows, cols = len(grid), len(grid[0])
    word_len = len(word)
    directions = [
        (0, 1),  # –ü—Ä–∞–≤–æ—Ä—É—á
        (1, 0),  # –í–Ω–∏–∑
        (1, 1),  # –î—ñ–∞–≥–æ–Ω–∞–ª—å –ø—Ä–∞–≤–æ—Ä—É—á –≤–Ω–∏–∑
        (1, -1), # –î—ñ–∞–≥–æ–Ω–∞–ª—å –ø—Ä–∞–≤–æ—Ä—É—á –≤–≤–µ—Ä—Ö
        (0, -1), # –õ—ñ–≤–æ—Ä—É—á
        (-1, 0), # –í–≥–æ—Ä—É
        (-1, -1),# –î—ñ–∞–≥–æ–Ω–∞–ª—å –ª—ñ–≤–æ—Ä—É—á –≤–≤–µ—Ä—Ö
        (-1, 1)  # –î—ñ–∞–≥–æ–Ω–∞–ª—å –ª—ñ–≤–æ—Ä—É—á –≤–Ω–∏–∑
    ]
    
    count = 0 # –ö—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Å–ª—ñ–≤
    for x in range(rows):
        for y in range(cols):
            for dx, dy in directions: # –ü–µ—Ä–µ–±—ñ—Ä –≤—Å—ñ—Ö –Ω–∞–ø—Ä—è–º–∫—ñ–≤
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–ª–æ–≤–æ –ø–æ–º—ñ—â–∞—î—Ç—å—Å—è —É –º–µ–∂–∞—Ö –º–∞—Ç—Ä–∏—Ü—ñ
                if 0 <= x + (word_len - 1) * dx < rows and 0 <= y + (word_len - 1) * dy < cols:

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å
                    if all(grid[x + k * dx][y + k * dy] == word[k] for k in range(word_len)):
                        count += 1
    return count

def task_1(file_path):
    word = "XMAS" # –°–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É
    return find_word_count(parse_file(file_path), word)

def task_2(file_path):
    grid = parse_file(file_path)

    def is_valid_cell(y, x):

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—É—Å—ñ–¥–Ω—ñ –¥—ñ–∞–≥–æ–Ω–∞–ª—å–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∏
        top_left, bottom_right = grid[y - 1][x - 1], grid[y + 1][x + 1]
        top_right, bottom_left = grid[y - 1][x + 1], grid[y + 1][x - 1]

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤ –¥–ª—è –æ–±–æ—Ö –¥—ñ–∞–≥–æ–Ω–∞–ª–µ–π
        return (
            top_left + bottom_right in {"MS", "SM"} and
            top_right + bottom_left in {"MS", "SM"}
        )

    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞–ª—ñ–¥–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω
    return sum(
        1 for y in range(1, len(grid) - 1) for x in range(1, len(grid[0]) - 1)
        if grid[y][x] == 'A' and is_valid_cell(y, x)
    )


def main(file_path='2024/day4/input.txt'):
    print('Part one:', task_1(file_path))  # 2521
    print('Part two:', task_2(file_path))  # 1912


if __name__ == "__main__":
    main()
