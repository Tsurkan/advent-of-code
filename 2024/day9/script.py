import time

# –ß–∏—Ç–∞—î–º–æ –≤—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
def read_input(filepath):
    with open(filepath, "r") as f:
        return f.read().strip()

# –í —Ç–∞–±–ª–∏—Ü—ñ Unicode —Å–∏–º–≤–æ–ª–∏: .=46 ÔøΩ=65533 –¢–æ–º—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±—É–¥—å—è–∫–∏–π —Å–º–∞–π–ª –ê–õ–ï –Ω–µ –∑–Ω–∞–∫ .
CONST_CHAR = 'ÔøΩ' # —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –º—ñ—Å—Ü—å
# CONST_CHAR = 'üòä' # —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –º—ñ—Å—Ü—å

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Å–∫ –∑–∞ –æ–ø–∏—Å–æ–º
def create_disk(line):
    disk = ""
    empty = False
    i = 0
    for char in line:
        if empty:
            disk += CONST_CHAR * int(char)  # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –±–ª–æ–∫–∏
        else:
            disk += chr(i) * int(char)  # –î–æ–¥–∞—î–º–æ –±–ª–æ–∫–∏ –∑ —Å–∏–º–≤–æ–ª–∞–º–∏
            i += 1
        empty = not empty  # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω
    return disk

# –û–±—á–∏—Å–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–≥—ñ–¥–Ω–æ —É–º–æ–≤ –∑–∞–¥–∞—á—ñ
def calculate_total(disk):
    total = 0
    for i, c in enumerate(disk):
        if c != CONST_CHAR:  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –±–ª–æ–∫–∏
            total += i * ord(c)  # –î–æ–¥–∞—î–º–æ –≤–∞–≥—É —Å–∏–º–≤–æ–ª–∞ –¥–æ —Å—É–º–∏
    return total


def task_one(filepath):
    line = read_input(filepath)
    start = time.time()

    disk = create_disk(line)
    disk = list(disk)
    first_dot = 0

    # –û—Å–Ω–æ–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤. –ó–∞–≥–∞–ª—å–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: O(n**2)
    while True:
        while disk[-1] == CONST_CHAR:  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –±–ª–æ–∫–∏ –∑ –∫—ñ–Ω—Ü—è
            disk.pop()
        try:
            first_dot = disk.index(CONST_CHAR, first_dot)  # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π –±–ª–æ–∫
        except ValueError:
            break
        disk[first_dot] = disk[-1]  # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ–∞–π–ª
        disk.pop()

    total = calculate_total(disk)

    end = time.time()
    print(f"Task 1 Result: {total}")
    print(f"Task 1 Time: {end - start:.2f}s")


def task_two(filepath):
    line = read_input(filepath)
    start = time.time()

    disk = create_disk(line)
    disk = remove_trailing_empty_blocks(disk)
    files = split_files(disk)
    disk = move_files(disk, files)
    total = calculate_total(disk)
    
    end = time.time()
    print(f"Task 2 Result: {total}")
    print(f"Task 2 Time: {end - start:.2f}s")

# –í–∏–¥–∞–ª—è—î –ø–æ—Ä–æ–∂–Ω—ñ –±–ª–æ–∫–∏ –∑ –∫—ñ–Ω—Ü—è
def remove_trailing_empty_blocks(disk):
    while disk[-1] == CONST_CHAR:
        disk.pop()
    return disk

# –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –¥–∏—Å–∫—É –Ω–∞ –æ–∫—Ä–µ–º—ñ —Ñ–∞–π–ª–∏
def split_files(disk):
    files = []
    last = disk[0]
    file_length = 0
    for i, char in enumerate(disk):
        if char != last:
            files.append((last * file_length, i - file_length)) if last != CONST_CHAR else 0
            file_length = 1
        else:
            file_length += 1
        last = char
    files.append((last * file_length, len(disk) - file_length))
    return files

# –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –º—ñ—Å—Ü—è
def move_files(disk, files):
    while len(files) > 0:
        length_last = len(files[-1][0])
        try:
            first_dot = disk.index(CONST_CHAR * length_last, 0, files[-1][1])
        except ValueError:
            files.pop()
            continue
        # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —Ñ–∞–π–ª
        disk = (
            disk[:first_dot] 
            + files[-1][0] 
            + disk[first_dot + length_last:files[-1][1]] 
            + CONST_CHAR * length_last 
            + disk[files[-1][1] + length_last:]
        )
        files.pop()
    return disk


def main(file_path='2024/day9/input.txt'):
    task_one(file_path)  # 6200294120911
    task_two(file_path)  # 6227018762750


if __name__ == "__main__":
    main()
